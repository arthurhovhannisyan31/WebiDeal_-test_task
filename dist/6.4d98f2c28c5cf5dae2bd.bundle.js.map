{"version":3,"sources":["webpack:///./src/components/SearchBar/style.ts","webpack:///./src/components/SearchBar/index.tsx","webpack:///./src/components/ForksTable/style.ts","webpack:///./src/components/ForksTable/helpers.ts","webpack:///./src/components/ForksTable/index.tsx","webpack:///./src/pages/Search/helpers.ts","webpack:///./src/pages/Search/style.ts","webpack:///./src/pages/Search/index.tsx","webpack:///./src/store/forks/actions.ts"],"names":["makeStyles","theme","margin","spacing","floating","position","top","right","searchFieldContainer","SearchBar","value","setValue","onSubmit","page","error","loading","classes","useStyles","handleChange","React","useCallback","event","target","handleSubmit","handleKeyDown","key","Grid","container","item","justify","sm","className","TextField","id","label","variant","fullWidth","onChange","onKeyDown","helperText","IconButton","CircularProgress","size","onClick","padding","table","minWidth","link","color","palette","secondary","main","rowSelector","name","full_name","owner","login","stars","stargazers_count","html_url","ForksTable","data","setPage","rowsPerPage","setRowsPerPage","totalCount","rows","useMemo","map","handleChangePage","_event","newPage","handleChangeRowsPerPage","parseInt","emptyRows","length","Math","min","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","row","Rating","readOnly","Link","href","rel","style","height","colSpan","TablePagination","count","onChangePage","rowsPerPageOptions","onChangeRowsPerPage","forksSelector","state","moduleName","paddingTop","emphasize","fontStyle","Forks","history","useHistory","location","useLocation","queryString","parse","search","pageValue","repository","useState","searchVal","setSearchVal","dispatch","useDispatch","useSelector","tableData","get","str","push","useEffect","url","type","GET_FORKS_COUNT_REQUEST","payload","params","Number","isNaN","per_page","GET_FORKS_PAGE_REQUEST","direction","alignItems","Typography","message"],"mappings":"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","file":"6.4d98f2c28c5cf5dae2bd.bundle.js","sourcesContent":["// deps\nimport { makeStyles, Theme } from '@material-ui/core/styles'\n\nexport default makeStyles((theme: Theme) => ({\n  margin: {\n    margin: theme.spacing(1),\n  },\n  floating: {\n    position: 'absolute',\n    top: theme.spacing(0.5),\n    right: theme.spacing(0.5),\n  },\n  searchFieldContainer: {\n    position: 'relative',\n  },\n}))\n","// deps\nimport React from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport TextField from '@material-ui/core/TextField'\nimport IconButton from '@material-ui/core/IconButton'\nimport SearchIcon from '@material-ui/icons/Search'\nimport CircularProgress from '@material-ui/core/CircularProgress'\n// helpers\nimport useStyles from '_/components/SearchBar/style'\n\ninterface IProps {\n  value: string\n  page?: number\n  setValue: React.Dispatch<React.SetStateAction<string>>\n  onSubmit: (str: string) => void\n  error: string\n  loading: boolean\n}\n\nconst SearchBar: React.FC<IProps> = ({\n  value,\n  setValue,\n  onSubmit,\n  page = 1,\n  error,\n  loading,\n}) => {\n  const classes = useStyles()\n\n  const handleChange = React.useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      setValue(event.target.value)\n    },\n    [setValue]\n  )\n\n  const handleSubmit = React.useCallback(() => onSubmit(value), [\n    onSubmit,\n    value,\n    page,\n  ])\n\n  const handleKeyDown = React.useCallback(\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\n      if (event.key === 'Enter') {\n        handleSubmit()\n      }\n    },\n    [handleSubmit]\n  )\n\n  // todo field validation\n\n  return (\n    <Grid container item justify=\"center\">\n      <Grid container item sm={4} className={classes.searchFieldContainer}>\n        <TextField\n          id=\"fork-search\"\n          label=\"Fork Search\"\n          variant=\"outlined\"\n          fullWidth\n          value={value}\n          onChange={handleChange}\n          onKeyDown={handleKeyDown}\n          error={!!error}\n          helperText={error && 'Please check owner or repositoryName'}\n        />\n        <Grid item className={classes.floating}>\n          {loading ? (\n            <IconButton>\n              <CircularProgress size={20} />\n            </IconButton>\n          ) : (\n            <IconButton onClick={handleSubmit}>\n              <SearchIcon />\n            </IconButton>\n          )}\n        </Grid>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default SearchBar\n","// deps\nimport { makeStyles, Theme } from '@material-ui/core/styles'\n\nexport default makeStyles((theme: Theme) => ({\n  container: {\n    padding: theme.spacing(0),\n  },\n  table: {\n    minWidth: 650,\n  },\n  link: {\n    color: theme.palette.secondary.main,\n  },\n}))\n","// helpers\nimport { IRow, IFork } from '_/components/ForksTable/types'\n\nexport const rowSelector = ({\n  full_name,\n  owner: { login },\n  stargazers_count,\n  html_url,\n}: IFork): IRow => ({\n  name: full_name,\n  owner: login,\n  stars: stargazers_count,\n  link: html_url,\n})\n","// deps\nimport React from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport Link from '@material-ui/core/Link'\nimport Paper from '@material-ui/core/Paper'\nimport Table from '@material-ui/core/Table'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport Rating from '@material-ui/lab/Rating'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableBody from '@material-ui/core/TableBody'\nimport TablePagination from '@material-ui/core/TablePagination'\n// helpers\nimport useStyles from '_/components/ForksTable/style'\nimport { IFork } from '_/components/ForksTable/types'\nimport { rowSelector } from '_/components/ForksTable/helpers'\n\ninterface IProps {\n  data: IFork[]\n  page: number\n  setPage: React.Dispatch<React.SetStateAction<number>>\n  rowsPerPage: number\n  setRowsPerPage: React.Dispatch<React.SetStateAction<number>>\n  totalCount: number\n}\n\nconst ForksTable: React.FC<IProps> = ({\n  data,\n  page,\n  setPage,\n  rowsPerPage,\n  setRowsPerPage,\n  totalCount,\n}) => {\n  // useStyles\n  const classes = useStyles()\n  // useMemo\n  const rows = React.useMemo(() => data.map(rowSelector), [\n    data,\n    page,\n    rowsPerPage,\n  ])\n  // useCallback\n  const handleChangePage = React.useCallback(\n    (_event: React.MouseEvent<HTMLButtonElement> | null, newPage: number) => {\n      setPage(newPage)\n    },\n    [setPage]\n  )\n\n  const handleChangeRowsPerPage = React.useCallback(\n    (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n      setRowsPerPage(parseInt(event.target.value, 10))\n      setPage(1)\n    },\n    [setPage, setRowsPerPage]\n  )\n\n  const emptyRows = data?.length\n    ? rowsPerPage - Math.min(rowsPerPage, totalCount - page * rowsPerPage)\n    : rowsPerPage\n\n  return (\n    <Grid container item justify=\"center\">\n      <Grid container item sm={10}>\n        <TableContainer component={Paper}>\n          <Table className={classes.table} aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n                <TableCell align=\"left\">Name</TableCell>\n                <TableCell align=\"left\">Owner</TableCell>\n                <TableCell align=\"left\">Stars</TableCell>\n                <TableCell align=\"left\">Link</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {rows.map((row) => (\n                <TableRow key={row.name}>\n                  <TableCell align=\"left\">{row.name}</TableCell>\n                  <TableCell align=\"left\">{row.owner}</TableCell>\n                  <TableCell align=\"left\">\n                    <Rating name=\"read-only\" value={row.stars} readOnly />\n                  </TableCell>\n                  <TableCell align=\"left\">\n                    <Link\n                      className={classes.link}\n                      href={row.link}\n                      target=\"_blank\"\n                      rel=\"nofollow\"\n                    >\n                      {row.name}\n                    </Link>\n                  </TableCell>\n                </TableRow>\n              ))}\n              {emptyRows > 0 && (\n                <TableRow style={{ height: 62 * emptyRows }}>\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n          <TablePagination\n            component=\"div\"\n            count={totalCount}\n            page={page}\n            onChangePage={handleChangePage}\n            rowsPerPage={rowsPerPage}\n            rowsPerPageOptions={[5, 10, 25]}\n            onChangeRowsPerPage={handleChangeRowsPerPage}\n          />\n        </TableContainer>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default ForksTable\n","// helpers\nimport { RootState } from '_/store/store'\nimport { moduleName } from '_/store/forks/constants'\n\nexport const forksSelector = (state: RootState) => state[moduleName]\n","// deps\nimport { makeStyles, Theme } from '@material-ui/core/styles'\n\nexport default makeStyles((theme: Theme) => ({\n  container: {\n    paddingTop: theme.spacing(5),\n  },\n  error: {\n    color: 'red',\n  },\n  emphasize: {\n    fontStyle: 'italic',\n  },\n}))\n","// deps\nimport React from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useHistory, useLocation } from 'react-router-dom'\n\nimport queryString from 'query-string'\n// components\nimport SearchBar from '_/components/SearchBar'\nimport ForksTable from '_/components/ForksTable'\n// helpers\nimport { getForksCountAction, getForksPageAction } from '_/store/forks/actions'\nimport { AppDispatch } from '_/store/store'\nimport { forksSelector } from '_/pages/Search/helpers'\nimport useStyles from '_/pages/Search/style'\n\nconst Forks: React.FC = () => {\n  // useStyles\n  const classes = useStyles()\n  // useRouter\n  const history = useHistory()\n  const location = useLocation()\n  const { page: pageValue = 0, repository = '' } = queryString.parse(\n    location.search\n  )\n\n  // useState\n  const [searchVal, setSearchVal] = React.useState<string>(\n    (repository as never) as string\n  )\n  const [page, setPage] = React.useState<number>(\n    +(pageValue as never) as number\n  )\n  const [rowsPerPage, setRowsPerPage] = React.useState(5)\n  // store\n  const dispatch: AppDispatch = useDispatch()\n  const { error, loading, data, totalCount } = useSelector(forksSelector)\n  const tableData = data.get(`${repository}-${rowsPerPage}-${page}`) || []\n  const handleSubmit = React.useCallback(\n    (str: string) => {\n      history.push(`/search?page=${0}&repository=${str}`)\n      setPage(0)\n    },\n    [history]\n  )\n\n  React.useEffect(() => {\n    if (!totalCount && repository) {\n      dispatch(getForksCountAction(repository as string))\n    }\n    // eslint-disable-next-line\n  }, [repository])\n\n  React.useEffect(() => {\n    if (!Number.isNaN(page) && repository) {\n      dispatch(\n        getForksPageAction({\n          page,\n          per_page: rowsPerPage,\n          url: repository as string,\n        })\n      )\n    }\n    // eslint-disable-next-line\n  }, [dispatch, repository, page, rowsPerPage])\n\n  React.useEffect(() => {\n    if (!Number.isNaN(pageValue)) {\n      setPage(+(pageValue as never) as number)\n    }\n  }, [pageValue])\n\n  return (\n    <Grid container justify=\"center\">\n      <Grid\n        container\n        item\n        sm={8}\n        className={classes.container}\n        direction=\"column\"\n        alignItems=\"center\"\n        spacing={3}\n      >\n        <Typography variant=\"subtitle1\">\n          Please use following format for search{' '}\n          <span className={classes.emphasize}>:owner/:repositoryName</span>\n        </Typography>\n        <SearchBar\n          loading={loading}\n          error={error?.message}\n          value={searchVal}\n          page={page}\n          setValue={setSearchVal}\n          onSubmit={handleSubmit}\n        />\n        {(Number.isNaN(page) || !repository || error) && (\n          <Typography className={classes.error}>\n            Please check your url, make sure page and repository params are\n            present\n          </Typography>\n        )}\n        <ForksTable\n          data={tableData}\n          page={page}\n          setPage={setPage}\n          rowsPerPage={rowsPerPage}\n          setRowsPerPage={setRowsPerPage}\n          totalCount={totalCount}\n        />\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default Forks\n","// helpers\nimport {\n  GET_FORKS_PAGE_REQUEST,\n  GET_FORKS_COUNT_REQUEST,\n} from '_/store/forks/constants'\nimport { IFetchGitHubForksProps } from '_/store/forks/types'\n\nexport const getForksCountAction = (url: string) => ({\n  type: GET_FORKS_COUNT_REQUEST,\n  payload: url,\n})\n\nexport const getForksPageAction = (params: IFetchGitHubForksProps) => ({\n  type: GET_FORKS_PAGE_REQUEST,\n  payload: params,\n})\n"],"sourceRoot":""}